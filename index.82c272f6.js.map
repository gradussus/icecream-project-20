{"mappings":"AAAA,MAyBMA,EAAM,IAAIC,sBAzBG,CAACC,EAASC,KAC3BD,EAAQE,SAAQC,IACdA,EAAMC,OAAOC,UAAUC,OAAO,gBAAiBH,EAAMI,mBAIvD,IAAIC,EAAgBC,SAASC,iBAAiB,YAG9CF,EAAcN,SAASS,IACrB,IAAIC,EAAa,EACbC,EAAWC,SAASH,EAAaI,aAAa,eAC9CC,EAAWC,KAAKC,MALP,IAKwBL,GACjCM,EAAUC,aAAY,WACxBR,GAAc,EACdD,EAAaU,YAAcT,EACvBA,GAAcC,GAChBS,cAAcH,KAEfH,SAODO,EAAa,GAEId,SAASC,iBAAiB,qBAClCR,SAAQsB,IACrB1B,EAAI2B,QAAQD,EAAID","sources":["src/js/numbers.js"],"sourcesContent":["const inViewport = (entries, observer) => {\n  entries.forEach(entry => {\n    entry.target.classList.toggle(\"is-inViewport\", entry.isIntersecting);\n  });\n\n  \n  let valueDisplays = document.querySelectorAll('.counter');\n  let interval = 700;\n  \n  valueDisplays.forEach((valueDisplay) => {\n    let startValue = 0;\n    let endValue = parseInt(valueDisplay.getAttribute('data-value'));\n    let duration = Math.floor(interval / endValue);\n    let counter = setInterval(function () {\n      startValue += 1;\n      valueDisplay.textContent = startValue;\n      if (startValue == endValue) {\n        clearInterval(counter);\n      }\n    }, duration);\n    // console.log(endValue);\n  });\n};\n\n\nconst Obs = new IntersectionObserver(inViewport);\nconst obsOptions = {};\n\nconst ELs_inViewport = document.querySelectorAll('[data-inviewport]');\nELs_inViewport.forEach(EL => {\n  Obs.observe(EL, obsOptions);\n  \n});\n\n\n\n\n  // const counters = document.querySelectorAll('.num');\n  // const speed = 100;\n  \n  // counters.forEach(counter => {\n  //     const animate = () => {\n  //         const value = +counter.getAttribute('data-value');\n  //         const data = +counter.innerText;\n      \n  //         const time = value / speed;\n  //         if (data < value) {\n  //             counter.innerText = Math.ceil(data + time);\n  //             setTimeout(animate, 1);\n  //           } else {\n  //               counter.innerText = value;\n  //             }\n  //           }\n          \n  //           animate();\n  //         });"],"names":["$dd46cd1dd8498cc1$var$Obs","IntersectionObserver","entries","observer","forEach","entry","target","classList","toggle","isIntersecting","valueDisplays","document","querySelectorAll","valueDisplay","startValue","endValue","parseInt","getAttribute","duration","Math","floor","counter","setInterval","textContent","clearInterval","$dd46cd1dd8498cc1$var$obsOptions","EL","observe"],"version":3,"file":"index.82c272f6.js.map"}